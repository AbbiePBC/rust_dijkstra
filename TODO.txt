## TODOs

# Easy things to fix
[ ] in rust, mod should be used instead of include!().
[ ] probably not worth providing names always for format!().
[ ] &str should be used instead of String where possible.
[ ] print path if doesn't exist
[ ] error out if incorrect number of nodes is provided
[ ] use more specific naming rather than get_node()
[ ] test_shorter_initial_route_gets_updated is testing 2 things; use the expected graph instead of the parsed one.
[ ] rename reverse_sort() lol

# Design comments
[ ] group the parsing functions under a module, and put that under the graph module,
and have a single "parse" function that generates a graph from a string.
Or maybe a constructor Graph::new_from_string(&str) -> Result<Graph>.
[ ] functions like create_new_edge would fit quite nicely as a constructor (static method).
 For example, `impl Edge { pub fn new(...) -> Edge { ... }}`.
[ ] the graph design has redundancy constraint (and Edge e has to be contained in `graph.edges[e.start]`).
Possibly use Vec<Vec<Weight>> and create functions that return full Edges (with start and end) when needed,
or builder functions that ask for what the client wants and hide the internal structure.
For example, `graph.create_new_edge(start, end, weight)` doesn't require the client to know the internal structure nor comply with the consistency constraint.
[ ] In general, code should have modular functions that allow you to test the same without bothering about the full binary,
capturing stdout, or comparing human-readable strings. Something like `assert_eq!(dikjstra_from_file("src/test/uk.txt"), OK(("Glasgow", "Edinburgh", 45)));`,
or using a custom enum instead of Result would convey the different error cases more clearly.
[ ] improve readability dijkstra and add_to_frontier functions work.
